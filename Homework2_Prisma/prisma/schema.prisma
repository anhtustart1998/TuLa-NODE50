generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model food {
  food_id    Int        @id @default(autoincrement())
  type_id    Int
  food_name  String?    @db.VarChar(255)
  image      String?    @db.VarChar(255)
  price      Float?     @db.Float
  desc       String?    @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)
  is_deleted Boolean    @default(false)
  deleted_by Int        @default(0)
  food_type  food_type  @relation(fields: [type_id], references: [type_id], onDelete: NoAction, onUpdate: NoAction, map: "food_ibfk_1")
  order      order[]
  sub_food   sub_food[]

  @@index([type_id], map: "type_id")
}

model food_type {
  type_id    Int       @id @default(autoincrement())
  type_name  String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  updated_at DateTime  @default(now()) @db.Timestamp(0)
  is_deleted Boolean   @default(false)
  deleted_by Int       @default(0)
  food       food[]
}

model like_res {
  like_id    Int        @id @default(autoincrement())
  user_id    Int
  res_id     Int
  created_at DateTime   @default(now()) @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)
  is_deleted Boolean    @default(false)
  deleted_by Int        @default(0)
  user       user       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "like_res_ibfk_1")
  restaurant restaurant @relation(fields: [res_id], references: [res_id], onDelete: NoAction, onUpdate: NoAction, map: "like_res_ibfk_2")

  @@unique([user_id, res_id], map: "user_id")
  @@index([res_id], map: "res_id")
}

model order {
  order_id       Int              @id @default(autoincrement())
  user_id        Int
  food_id        Int
  amount         Int              @default(1)
  code           String?          @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  deleted_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime         @default(now()) @db.Timestamp(0)
  is_deleted     Boolean          @default(false)
  deleted_by     Int              @default(0)
  status         order_status     @default(pending)
  user           user             @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_1")
  food           food             @relation(fields: [food_id], references: [food_id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_2")
  order_sub_food order_sub_food[]

  @@index([food_id], map: "food_id")
  @@index([user_id], map: "user_id")
}

model order_sub_food {
  order_sub_food_id Int       @id @default(autoincrement())
  order_id          Int
  sub_id            Int
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  deleted_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime  @default(now()) @db.Timestamp(0)
  is_deleted        Boolean   @default(false)
  deleted_by        Int       @default(0)
  order             order     @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "order_sub_food_ibfk_1")
  sub_food          sub_food  @relation(fields: [sub_id], references: [sub_id], onDelete: NoAction, onUpdate: NoAction, map: "order_sub_food_ibfk_2")

  @@unique([order_id, sub_id], map: "order_id")
  @@index([sub_id], map: "sub_id")
}

model rate_res {
  rate_id    Int        @id @default(autoincrement())
  user_id    Int
  res_id     Int
  amount     Int?
  created_at DateTime   @default(now()) @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)
  is_deleted Boolean    @default(false)
  deleted_by Int        @default(0)
  comment    String?    @db.Text
  user       user       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "rate_res_ibfk_1")
  restaurant restaurant @relation(fields: [res_id], references: [res_id], onDelete: NoAction, onUpdate: NoAction, map: "rate_res_ibfk_2")

  @@unique([user_id, res_id], map: "user_id")
  @@index([res_id], map: "res_id")
}

model restaurant {
  res_id     Int        @id @default(autoincrement())
  res_name   String?    @db.VarChar(255)
  image      String?    @db.VarChar(255)
  desc       String?    @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)
  is_deleted Boolean    @default(false)
  deleted_by Int        @default(0)
  like_res   like_res[]
  rate_res   rate_res[]
}

model sub_food {
  sub_id         Int              @id @default(autoincrement())
  food_id        Int
  sub_name       String?          @db.VarChar(255)
  sub_price      Float?           @db.Float
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  deleted_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime         @default(now()) @db.Timestamp(0)
  is_deleted     Boolean          @default(false)
  deleted_by     Int              @default(0)
  order_sub_food order_sub_food[]
  food           food             @relation(fields: [food_id], references: [food_id], onDelete: NoAction, onUpdate: NoAction, map: "sub_food_ibfk_1")

  @@index([food_id], map: "food_id")
}

model user {
  user_id    Int        @id @default(autoincrement())
  full_name  String     @unique(map: "full_name") @db.VarChar(255)
  email      String     @unique(map: "email") @db.VarChar(255)
  password   String?    @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)
  is_deleted Boolean    @default(false)
  deleted_by Int        @default(0)
  like_res   like_res[]
  order      order[]
  rate_res   rate_res[]
}

enum order_status {
  pending
  completed
  canceled
  failed
}
